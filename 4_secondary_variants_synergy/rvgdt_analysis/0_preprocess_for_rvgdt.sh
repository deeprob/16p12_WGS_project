#!/bin/bash

# originally prepared by jianyu
# edited by anastasia
# further edited by deepro
# edits
# Separated RVGDT preprocess and run scripts 
# 

## NOTE: This script prepares files required to run RV-GDT
set -ue

description="Exclude rare variants inside structural variant regions for each individual, then convert to the format for RV-GDT"

input_files_dir="/data5/deepro/wgs_16p/rvgdt/data/input_files"
intermediate_files_dir="/data5/deepro/wgs_16p/rvgdt/data/intermediate_files"
tmp_files_dir="/data5/deepro/wgs_16p/rvgdt/data/tmp_files"

# input files which will be used in this script
coding_snv_rare_vcf="${input_files_dir}/16p12_TDT_missense_rare_filter.vcf"
sv_calls="${input_files_dir}/sv_calls_combined.txt"
genome="/data/bx_references/hg19/ucsc.hg19.fasta"

# previously generated intermediate files which will be used in this script
tdt_sample_list_trios="${intermediate_files_dir}/tdt_sample_list_trios.txt"

# intermediate files generated by this script
merged_filtered_snv_vcf="${intermediate_files_dir}/16p12_TDT_missense_rare_filterSV.vcf"
merged_filtered_snv_norm_vcf="${intermediate_files_dir}/16p12_TDT_missense_rare_filterSV_norm.vcf"
merged_filtered_snv_norm_gt_vcf="${intermediate_files_dir}/16p12_TDT_missense_rare_filterSV.GT.vcf"
rvgdt_genelist="${intermediate_files_dir}/rvgdt_genelist.txt"

# utility scripts dir
utils_dir="/data5/deepro/wgs_16p/rvgdt/src/utils"

# Dir to store generated intermediate files required for rvgdt analysis
vcf_dir="${intermediate_files_dir}/vcfs"
svs_dir="${intermediate_files_dir}/svs"
filter_dir="${intermediate_files_dir}/filters"
genes_dir="${intermediate_files_dir}/genes"
genos_dir="${intermediate_files_dir}/genos"

mkdir -p $vcf_dir
mkdir -p $svs_dir
mkdir -p $filter_dir
mkdir -p $genes_dir
mkdir -p $genos_dir

# prepare sample list
echo "prepare sample list"
python $utils_dir/prepare_sample_list.py

# keep only complete trios
echo "keep only complete trios"
python $utils_dir/keep_only_complete_trios.py

# remove unknown from ped
echo "remove unknown from ped"
python $utils_dir/remove_unknowns_from_ped.py

# split the merged vcf file into individuals
echo "split the merged vcf file into individuals"
cat $tdt_sample_list_trios | parallel --jobs 30 bcftools view -c1 -Oz -s {} -o $vcf_dir/{}.vcf.gz $coding_snv_rare_vcf

# split the structral variant calls by individuals
echo "split the structural variant calls by individuals"
python $utils_dir/sv2_split.py $sv_calls

# for each vcf file, filter out rare variants inside SV region of the corresponding individual
echo "filter out rare variants inside SV region of the corresponding individual"
cat $tdt_sample_list_trios | parallel --jobs 30 "bedtools subtract -A -a ${vcf_dir}/{}.vcf.gz -b ${svs_dir}/{}.sv2.bed | cat <(gunzip -c ${vcf_dir}/{}.vcf.gz | grep \"^#\") - > ${filter_dir}/{}.filterSV.vcf"

# compress vcf files and index them
echo "compress vcf files and index them"
find $filter_dir -iname "*.vcf" | parallel bcftools view -I {} -Oz -o {}.gz
find $filter_dir -iname "*.vcf.gz" | parallel bcftools index {}

# merge all filtered vcf file
echo "merge all filtered vcf file"
bcftools merge $filter_dir/*.vcf.gz -0 -Ov -o $merged_filtered_snv_vcf

# split lines with multiple variants and left-normalize indels
echo "split lines with multiple variants and left-normalize indels"
bcftools norm -m-both -o "${tmp_files_dir}/tmp" $merged_filtered_snv_vcf #Split lines with multiple variants
bcftools norm -f $genome -o $merged_filtered_snv_norm_vcf "${tmp_files_dir}/tmp" #Left-normalize indel variants

# only keep the GT field for downstream usage
echo "keep the GT field for downstream usage"
bcftools annotate -x 'fmt' -Ov -o $merged_filtered_snv_norm_gt_vcf $merged_filtered_snv_norm_vcf

# extract genes with >=3 variants
echo "extract genes with >=3 variants"
bcftools query -f '%INFO/Gene.refGene\n' $merged_filtered_snv_norm_gt_vcf | sort | uniq -c | awk '$1>2 {print $2}' > $rvgdt_genelist

# create vcf file for each gene
echo "create vcf file for each gene"
cat $rvgdt_genelist | parallel --jobs 30 "bcftools view ${merged_filtered_snv_norm_gt_vcf} -i 'INFO/Gene.refGene==\"{}\"' -Ov -o ${genes_dir}/{}.vcf"

# count the number of alleles for each gene vcf file
echo "count the number of alleles for each gene vcf file"
cat $rvgdt_genelist | parallel --jobs 30 python $utils_dir/gt_to_rvgdt.py $genes_dir/{}.vcf $genos_dir/{}.geno.txt

# prepare pedigree files according to rvgdt format
echo "prepare pedigree files according to rvgdt format"
# get pedigrees for each phenotype, then perform rv-gdt on each phenotype
python $utils_dir/map_phenotype_split_2.py # note by anastasia: I edited the file added engine='openpyxl'
										# and family_pedigree.fix.txt -> all_batches.ped
